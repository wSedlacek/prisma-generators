datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

type Numeric = Float

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["windows", "debian-openssl-1.1.x", "native"]
  output          = "../prisma/generated/client"
  previewFeatures = ["aggregateApi", "distinct", "connectOrCreate"]
}

generator nestjs {
  provider    = "node ../src/cli/dev.ts"
  output      = "../prisma/generated/nestjs"
  emitDMMF    = true
  defaultTake = 20
}

// Role enum comment
/// Role enum doc
enum Role {
  USER
  ADMIN
}

// User model comment
/// User model doc
/// @@NestJS.type("Client")
model User {
  // User model field comment
  /// User model field doc
  id      Int     @default(autoincrement()) @id
  email   String  @unique
  /// renamed field doc
  /// @NestJS.field("firstName")
  name    String?
  age     Int
  /// @NestJS.field("accountBalance")
  balance Numeric
  amount  Float
  /// @NestJS.field("clientPosts")
  posts   post[]
  role    Role
}

enum PostKind {
  BLOG
  ADVERT
}

model post {
  uuid      String    @default(uuid()) @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  published Boolean
  title     String
  content   String?
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  kind      PostKind?
  metadata  Json
}

model Category {
  name   String
  slug   String
  number Int

  @@unique([slug, number])
}

model Patient {
  firstName String
  lastName  String
  email     String

  @@id([firstName, lastName])
}

model Movie {
  directorFirstName String
  directorLastName  String
  director          Director @relation(fields: [directorFirstName, directorLastName], references: [firstName, lastName])
  title             String

  @@id([directorFirstName, directorLastName, title])
}

model Director {
  firstName String
  lastName  String
  movies    Movie[]

  @@id([firstName, lastName])
}
