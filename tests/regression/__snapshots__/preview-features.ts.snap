// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`preview features when \`connectOrCreate\` is enabled should properly generate input type classes for connectOrCreate: UserCreateOneWithoutPostsFieldInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { UserCreateOrConnectWithoutPostInput } from \\"../inputs/UserCreateOrConnectWithoutPostInput\\";
import { UserCreateWithoutPostsFieldInput } from \\"../inputs/UserCreateWithoutPostsFieldInput\\";
import { UserWhereUniqueInput } from \\"../inputs/UserWhereUniqueInput\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class UserCreateOneWithoutPostsFieldInput {
  @Field(() => UserCreateWithoutPostsFieldInput, {
    nullable: true,
    description: undefined
  })
  create?: UserCreateWithoutPostsFieldInput | undefined;

  @Field(() => UserWhereUniqueInput, {
    nullable: true,
    description: undefined
  })
  connect?: UserWhereUniqueInput | undefined;

  @Field(() => UserCreateOrConnectWithoutPostInput, {
    nullable: true,
    description: undefined
  })
  connectOrCreate?: UserCreateOrConnectWithoutPostInput | undefined;
}
"
`;

exports[`preview features when \`connectOrCreate\` is enabled should properly generate input type classes for connectOrCreate: UserCreateOrConnectWithoutPostInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { UserCreateWithoutPostsFieldInput } from \\"../inputs/UserCreateWithoutPostsFieldInput\\";
import { UserWhereUniqueInput } from \\"../inputs/UserWhereUniqueInput\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class UserCreateOrConnectWithoutPostInput {
  @Field(() => UserWhereUniqueInput, {
    nullable: false,
    description: undefined
  })
  where!: UserWhereUniqueInput;

  @Field(() => UserCreateWithoutPostsFieldInput, {
    nullable: false,
    description: undefined
  })
  create!: UserCreateWithoutPostsFieldInput;
}
"
`;

exports[`preview features when \`connectOrCreate\` is enabled should properly generate input type classes for connectOrCreate: UserUpdateOneRequiredWithoutPostsFieldInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { UserCreateOrConnectWithoutPostInput } from \\"../inputs/UserCreateOrConnectWithoutPostInput\\";
import { UserCreateWithoutPostsFieldInput } from \\"../inputs/UserCreateWithoutPostsFieldInput\\";
import { UserUpdateWithoutPostsFieldDataInput } from \\"../inputs/UserUpdateWithoutPostsFieldDataInput\\";
import { UserUpsertWithoutPostsFieldInput } from \\"../inputs/UserUpsertWithoutPostsFieldInput\\";
import { UserWhereUniqueInput } from \\"../inputs/UserWhereUniqueInput\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class UserUpdateOneRequiredWithoutPostsFieldInput {
  @Field(() => UserCreateWithoutPostsFieldInput, {
    nullable: true,
    description: undefined
  })
  create?: UserCreateWithoutPostsFieldInput | undefined;

  @Field(() => UserWhereUniqueInput, {
    nullable: true,
    description: undefined
  })
  connect?: UserWhereUniqueInput | undefined;

  @Field(() => UserUpdateWithoutPostsFieldDataInput, {
    nullable: true,
    description: undefined
  })
  update?: UserUpdateWithoutPostsFieldDataInput | undefined;

  @Field(() => UserUpsertWithoutPostsFieldInput, {
    nullable: true,
    description: undefined
  })
  upsert?: UserUpsertWithoutPostsFieldInput | undefined;

  @Field(() => UserCreateOrConnectWithoutPostInput, {
    nullable: true,
    description: undefined
  })
  connectOrCreate?: UserCreateOrConnectWithoutPostInput | undefined;
}
"
`;

exports[`preview features when \`connectOrCreate\` is enabled should properly generate input type classes for connectOrCreate: inputs index 1`] = `
"export { IntFilter } from \\"./IntFilter\\";
export { PostCreateInput } from \\"./PostCreateInput\\";
export { PostCreateManyWithoutAuthorInput } from \\"./PostCreateManyWithoutAuthorInput\\";
export { PostCreateOrConnectWithoutUserInput } from \\"./PostCreateOrConnectWithoutUserInput\\";
export { PostCreateWithoutAuthorInput } from \\"./PostCreateWithoutAuthorInput\\";
export { PostFilter } from \\"./PostFilter\\";
export { PostOrderByInput } from \\"./PostOrderByInput\\";
export { PostScalarWhereInput } from \\"./PostScalarWhereInput\\";
export { PostUpdateInput } from \\"./PostUpdateInput\\";
export { PostUpdateManyDataInput } from \\"./PostUpdateManyDataInput\\";
export { PostUpdateManyMutationInput } from \\"./PostUpdateManyMutationInput\\";
export { PostUpdateManyWithWhereNestedInput } from \\"./PostUpdateManyWithWhereNestedInput\\";
export { PostUpdateManyWithoutAuthorInput } from \\"./PostUpdateManyWithoutAuthorInput\\";
export { PostUpdateWithWhereUniqueWithoutAuthorInput } from \\"./PostUpdateWithWhereUniqueWithoutAuthorInput\\";
export { PostUpdateWithoutAuthorDataInput } from \\"./PostUpdateWithoutAuthorDataInput\\";
export { PostUpsertWithWhereUniqueWithoutAuthorInput } from \\"./PostUpsertWithWhereUniqueWithoutAuthorInput\\";
export { PostWhereInput } from \\"./PostWhereInput\\";
export { PostWhereUniqueInput } from \\"./PostWhereUniqueInput\\";
export { StringFilter } from \\"./StringFilter\\";
export { UserCreateInput } from \\"./UserCreateInput\\";
export { UserCreateOneWithoutPostsFieldInput } from \\"./UserCreateOneWithoutPostsFieldInput\\";
export { UserCreateOrConnectWithoutPostInput } from \\"./UserCreateOrConnectWithoutPostInput\\";
export { UserCreateWithoutPostsFieldInput } from \\"./UserCreateWithoutPostsFieldInput\\";
export { UserOrderByInput } from \\"./UserOrderByInput\\";
export { UserUpdateInput } from \\"./UserUpdateInput\\";
export { UserUpdateManyMutationInput } from \\"./UserUpdateManyMutationInput\\";
export { UserUpdateOneRequiredWithoutPostsFieldInput } from \\"./UserUpdateOneRequiredWithoutPostsFieldInput\\";
export { UserUpdateWithoutPostsFieldDataInput } from \\"./UserUpdateWithoutPostsFieldDataInput\\";
export { UserUpsertWithoutPostsFieldInput } from \\"./UserUpsertWithoutPostsFieldInput\\";
export { UserWhereInput } from \\"./UserWhereInput\\";
export { UserWhereUniqueInput } from \\"./UserWhereUniqueInput\\";
"
`;

exports[`preview features when \`distinct\` is enabled should properly generate args classes for model actions resolvers: AggregateUserArgs 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { UserOrderByInput } from \\"../../../inputs/UserOrderByInput\\";
import { UserWhereInput } from \\"../../../inputs/UserWhereInput\\";
import { UserWhereUniqueInput } from \\"../../../inputs/UserWhereUniqueInput\\";
import { UserDistinctFieldEnum } from \\"../../../../enums/UserDistinctFieldEnum\\";

@ArgsType()
export class AggregateUserArgs {
  @Field(() => UserWhereInput, { nullable: true })
  where?: UserWhereInput | undefined;

  @Field(() => [UserOrderByInput], { nullable: true })
  orderBy?: UserOrderByInput[] | undefined;

  @Field(() => UserWhereUniqueInput, { nullable: true })
  cursor?: UserWhereUniqueInput | undefined;

  @Field(() => Int, { nullable: true })
  take?: number | undefined;

  @Field(() => Int, { nullable: true })
  skip?: number | undefined;

  @Field(() => [UserDistinctFieldEnum], { nullable: true })
  distinct?: Array<keyof typeof UserDistinctFieldEnum> | undefined;
}
"
`;

exports[`preview features when \`distinct\` is enabled should properly generate args classes for model actions resolvers: FindManyUserArgs 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { UserOrderByInput } from \\"../../../inputs/UserOrderByInput\\";
import { UserWhereInput } from \\"../../../inputs/UserWhereInput\\";
import { UserWhereUniqueInput } from \\"../../../inputs/UserWhereUniqueInput\\";
import { UserDistinctFieldEnum } from \\"../../../../enums/UserDistinctFieldEnum\\";

@ArgsType()
export class FindManyUserArgs {
  @Field(() => UserWhereInput, { nullable: true })
  where?: UserWhereInput | undefined;

  @Field(() => [UserOrderByInput], { nullable: true })
  orderBy?: UserOrderByInput[] | undefined;

  @Field(() => UserWhereUniqueInput, { nullable: true })
  cursor?: UserWhereUniqueInput | undefined;

  @Field(() => Int, { nullable: true })
  take?: number | undefined;

  @Field(() => Int, { nullable: true })
  skip?: number | undefined;

  @Field(() => [UserDistinctFieldEnum], { nullable: true })
  distinct?: Array<keyof typeof UserDistinctFieldEnum> | undefined;
}
"
`;

exports[`preview features when \`distinct\` is enabled should properly generate model distinct enum when model field is renamed: SampleModelDistinctFieldEnum 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";

export enum SampleModelDistinctFieldEnum {
  intIdField = \\"intIdField\\",
  mappedFieldName = \\"stringField\\",
  intField = \\"intField\\"
}
registerEnumType(SampleModelDistinctFieldEnum, {
  name: \\"SampleModelDistinctFieldEnum\\",
  description: undefined,
});
"
`;

exports[`preview features when \`distinct\` is enabled should properly generate model distinct enum when model is renamed: ExampleModelDistinctFieldEnum 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";

export enum ExampleModelDistinctFieldEnum {
  intIdField = \\"intIdField\\",
  stringField = \\"stringField\\",
  intField = \\"intField\\"
}
TypeGraphQL.registerEnumType(ExampleModelDistinctFieldEnum, {
  name: \\"ExampleModelDistinctFieldEnum\\",
  description: undefined,
});
"
`;

exports[`preview features when \`distinct\` is enabled should properly generate model distinct enum when model is renamed: enums index 1`] = `
"export { ExampleModelDistinctFieldEnum } from \\"./ExampleModelDistinctFieldEnum\\";
export { SortOrder } from \\"./SortOrder\\";
"
`;

exports[`preview features when \`distinct\` is enabled should properly generate model distinct field enum: SampleModelDistinctFieldEnum 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";

export enum SampleModelDistinctFieldEnum {
  intIdField = \\"intIdField\\",
  stringField = \\"stringField\\",
  intField = \\"intField\\"
}
TypeGraphQL.registerEnumType(SampleModelDistinctFieldEnum, {
  name: \\"SampleModelDistinctFieldEnum\\",
  description: undefined,
});
"
`;

exports[`preview features when \`distinct\` is enabled should properly generate model distinct field enum: enums index 1`] = `
"export { SampleModelDistinctFieldEnum } from \\"./SampleModelDistinctFieldEnum\\";
export { SortOrder } from \\"./SortOrder\\";
"
`;

exports[`preview features when both distinct and aggregations features are enabled should properly generate distinct enum arg field and import when model is renamed: AggregateExampleModelArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { ExampleModelOrderByInput } from \\"../../../inputs/ExampleModelOrderByInput\\";
import { ExampleModelWhereInput } from \\"../../../inputs/ExampleModelWhereInput\\";
import { ExampleModelWhereUniqueInput } from \\"../../../inputs/ExampleModelWhereUniqueInput\\";
import { ExampleModelDistinctFieldEnum } from \\"../../../../enums/ExampleModelDistinctFieldEnum\\";

@TypeGraphQL.ArgsType()
export class AggregateExampleModelArgs {
  @TypeGraphQL.Field(_type => ExampleModelWhereInput, { nullable: true })
  where?: ExampleModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => [ExampleModelOrderByInput], { nullable: true })
  orderBy?: ExampleModelOrderByInput[] | undefined;

  @TypeGraphQL.Field(_type => ExampleModelWhereUniqueInput, { nullable: true })
  cursor?: ExampleModelWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, { nullable: true })
  take?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, { nullable: true })
  skip?: number | undefined;

  @TypeGraphQL.Field(_type => [ExampleModelDistinctFieldEnum], { nullable: true })
  distinct?: Array<keyof typeof ExampleModelDistinctFieldEnum> | undefined;
}
"
`;
