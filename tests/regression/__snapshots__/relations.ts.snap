// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`relations resolvers generation should properly generate relation resolver class for model with multi id keys with relation: MovieRelationsResolver 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import { Director } from \\"../../../models/Director\\";
import { Movie } from \\"../../../models/Movie\\";

@Resolver(() => Movie)
export class MovieRelationsResolver {
  @ResolveField(() => Director, {
    nullable: false,
    description: undefined,
  })
  async director(@Root() movie: Movie, @Context() ctx: any): Promise<Director> {
    return ctx.prisma.movie.findOne({
      where: {
        directorFirstName_directorLastName_title: {
          directorFirstName: movie.directorFirstName,
          directorLastName: movie.directorLastName,
          title: movie.title,
        },
      },
    }).director({});
  }
}
"
`;

exports[`relations resolvers generation should properly generate relation resolver class for model with unique fields: DirectorRelationsResolver 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import { Director } from \\"../../../models/Director\\";
import { Movie } from \\"../../../models/Movie\\";
import { DirectorMoviesArgs } from \\"./args/DirectorMoviesArgs\\";

@Resolver(() => Director)
export class DirectorRelationsResolver {
  @ResolveField(() => [Movie], {
    nullable: true,
    description: undefined,
  })
  async movies(@Root() director: Director, @Context() ctx: any, @Args() args: DirectorMoviesArgs): Promise<Movie[] | undefined> {
    return ctx.prisma.director.findOne({
      where: {
        firstName_lastName: {
          firstName: director.firstName,
          lastName: director.lastName,
        },
      },
    }).movies(args);
  }
}
"
`;

exports[`relations resolvers generation should properly generate relation resolvers classes for models with renamed relation fields: Post 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import { Post } from \\"../../../models/Post\\";
import { User } from \\"../../../models/User\\";

@Resolver(() => Post)
export class PostRelationsResolver {
  @ResolveField(() => User, {
    nullable: true,
    description: \\"author field doc\\",
  })
  async postAuthor(@Root() post: Post, @Context() ctx: any): Promise<User | undefined> {
    return ctx.prisma.post.findOne({
      where: {
        uuid: post.uuid,
      },
    }).author({});
  }
}
"
`;

exports[`relations resolvers generation should properly generate relation resolvers classes for models with renamed relation fields: User 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import { Post } from \\"../../../models/Post\\";
import { User } from \\"../../../models/User\\";
import { UserPostsArgs } from \\"./args/UserPostsArgs\\";

@Resolver(() => User)
export class UserRelationsResolver {
  @ResolveField(() => [Post], {
    nullable: true,
    description: undefined,
  })
  async userPosts(@Root() user: User, @Context() ctx: any, @Args() args: UserPostsArgs): Promise<Post[] | undefined> {
    return ctx.prisma.user.findOne({
      where: {
        id: user.id,
      },
    }).posts(args);
  }
}
"
`;

exports[`relations resolvers generation should properly generate resolver and args class for array relation resolvers: UserPostsArgs 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { PostOrderByInput } from \\"../../../inputs/PostOrderByInput\\";
import { PostWhereInput } from \\"../../../inputs/PostWhereInput\\";
import { PostWhereUniqueInput } from \\"../../../inputs/PostWhereUniqueInput\\";

@ArgsType()
export class UserPostsArgs {
  @Field(() => PostWhereInput, { nullable: true })
  where?: PostWhereInput | undefined;

  @Field(() => PostOrderByInput, { nullable: true })
  orderBy?: PostOrderByInput | undefined;

  @Field(() => PostWhereUniqueInput, { nullable: true })
  cursor?: PostWhereUniqueInput | undefined;

  @Field(() => Int, { nullable: true })
  take?: number | undefined;

  @Field(() => Int, { nullable: true })
  skip?: number | undefined;
}
"
`;

exports[`relations resolvers generation should properly generate resolver and args class for array relation resolvers: UserRelationsResolver 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import { Post } from \\"../../../models/Post\\";
import { User } from \\"../../../models/User\\";
import { UserPostsArgs } from \\"./args/UserPostsArgs\\";

@Resolver(() => User)
export class UserRelationsResolver {
  @ResolveField(() => [Post], {
    nullable: true,
    description: undefined,
  })
  async posts(@Root() user: User, @Context() ctx: any, @Args() args: UserPostsArgs): Promise<Post[] | undefined> {
    return ctx.prisma.user.findOne({
      where: {
        id: user.id,
      },
    }).posts(args);
  }
}
"
`;

exports[`relations resolvers generation should properly generate resolver class for single relation resolvers: UserRelationsResolver 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import { Address } from \\"../../../models/Address\\";
import { User } from \\"../../../models/User\\";

@Resolver(() => User)
export class UserRelationsResolver {
  @ResolveField(() => Address, {
    nullable: true,
    description: undefined,
  })
  async address(@Root() user: User, @Context() ctx: any): Promise<Address | undefined> {
    return ctx.prisma.user.findOne({
      where: {
        id: user.id,
      },
    }).address({});
  }
}
"
`;

exports[`relations resolvers generation should properly generate resolvers classes for prisma models with cyclic relations: Post 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import { Post } from \\"../../../models/Post\\";
import { User } from \\"../../../models/User\\";

@Resolver(() => Post)
export class PostRelationsResolver {
  @ResolveField(() => User, {
    nullable: true,
    description: \\"author field doc\\",
  })
  async author(@Root() post: Post, @Context() ctx: any): Promise<User | undefined> {
    return ctx.prisma.post.findOne({
      where: {
        uuid: post.uuid,
      },
    }).author({});
  }
}
"
`;

exports[`relations resolvers generation should properly generate resolvers classes for prisma models with cyclic relations: User 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import { Post } from \\"../../../models/Post\\";
import { User } from \\"../../../models/User\\";
import { UserPostsArgs } from \\"./args/UserPostsArgs\\";

@Resolver(() => User)
export class UserRelationsResolver {
  @ResolveField(() => [Post], {
    nullable: true,
    description: undefined,
  })
  async posts(@Root() user: User, @Context() ctx: any, @Args() args: UserPostsArgs): Promise<Post[] | undefined> {
    return ctx.prisma.user.findOne({
      where: {
        id: user.id,
      },
    }).posts(args);
  }
}
"
`;
