// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`outputs should properly generate aggregate classes for model with lowercase name: AggregateExample 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@ObjectType({
  isAbstract: true,
  description: undefined,
})
export class AggregateExample {
  @Field(() => Int, {
    nullable: false,
    description: undefined
  })
  count!: number;
}
"
`;

exports[`outputs should properly generate aggregate classes for model with lowercase name: outputs index 1`] = `
"export { AggregateExample } from \\"./AggregateExample\\";
export { BatchPayload } from \\"./BatchPayload\\";
"
`;

exports[`outputs should properly generate aggregate classes for renamed model: AggregateExample 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@ObjectType({
  isAbstract: true,
  description: undefined,
})
export class AggregateExample {
  @Field(() => Int, {
    nullable: false,
    description: undefined
  })
  count!: number;
}
"
`;

exports[`outputs should properly generate aggregate classes for renamed model: outputs index 1`] = `
"export { AggregateExample } from \\"./AggregateExample\\";
export { BatchPayload } from \\"./BatchPayload\\";
"
`;

exports[`outputs should properly generate output type classes: AggregateSample 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@ObjectType({
  isAbstract: true,
  description: undefined,
})
export class AggregateSample {
  @Field(() => Int, {
    nullable: false,
    description: undefined
  })
  count!: number;
}
"
`;

exports[`outputs should properly generate output type classes: BatchPayload 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@ObjectType({
  isAbstract: true,
  description: undefined,
})
export class BatchPayload {
  @Field(() => Int, {
    nullable: false,
    description: undefined
  })
  count!: number;
}
"
`;

exports[`outputs should properly generate output type classes: outputs index 1`] = `
"export { AggregateSample } from \\"./AggregateSample\\";
export { BatchPayload } from \\"./BatchPayload\\";
"
`;

exports[`outputs when experimental feature \`aggregateApi\` is enabled  should properly generate aggregate output types classes: SampleAvgAggregateOutputType 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@ObjectType({
  isAbstract: true,
  description: undefined,
})
export class SampleAvgAggregateOutputType {
  @Field(() => Float, {
    nullable: false,
    description: undefined
  })
  intIdField!: number;

  @Field(() => Float, {
    nullable: false,
    description: undefined
  })
  floatField!: number;
}
"
`;

exports[`outputs when experimental feature \`aggregateApi\` is enabled  should properly generate aggregate output types classes: SampleMaxAggregateOutputType 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@ObjectType({
  isAbstract: true,
  description: undefined,
})
export class SampleMaxAggregateOutputType {
  @Field(() => Int, {
    nullable: false,
    description: undefined
  })
  intIdField!: number;

  @Field(() => Float, {
    nullable: false,
    description: undefined
  })
  floatField!: number;
}
"
`;

exports[`outputs when experimental feature \`aggregateApi\` is enabled  should properly generate aggregate output types classes: SampleMinAggregateOutputType 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@ObjectType({
  isAbstract: true,
  description: undefined,
})
export class SampleMinAggregateOutputType {
  @Field(() => Int, {
    nullable: false,
    description: undefined
  })
  intIdField!: number;

  @Field(() => Float, {
    nullable: false,
    description: undefined
  })
  floatField!: number;
}
"
`;

exports[`outputs when experimental feature \`aggregateApi\` is enabled  should properly generate aggregate output types classes: SampleSumAggregateOutputType 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@ObjectType({
  isAbstract: true,
  description: undefined,
})
export class SampleSumAggregateOutputType {
  @Field(() => Int, {
    nullable: false,
    description: undefined
  })
  intIdField!: number;

  @Field(() => Float, {
    nullable: false,
    description: undefined
  })
  floatField!: number;
}
"
`;

exports[`outputs when experimental feature \`aggregateApi\` is enabled  should properly generate aggregate output types classes: outputs index 1`] = `
"export { AggregateSample } from \\"./AggregateSample\\";
export { BatchPayload } from \\"./BatchPayload\\";
export { SampleAvgAggregateOutputType } from \\"./SampleAvgAggregateOutputType\\";
export { SampleMaxAggregateOutputType } from \\"./SampleMaxAggregateOutputType\\";
export { SampleMinAggregateOutputType } from \\"./SampleMinAggregateOutputType\\";
export { SampleSumAggregateOutputType } from \\"./SampleSumAggregateOutputType\\";
"
`;
