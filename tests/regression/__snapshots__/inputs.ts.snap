// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`inputs should properly generate input type class for filtering by enums values: ColorFilter 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { Color } from \\"../../enums/Color\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class ColorFilter {
  @Field(() => Color, {
    nullable: true,
    description: undefined
  })
  equals?: keyof typeof Color | undefined;

  @Field(() => Color, {
    nullable: true,
    description: undefined
  })
  not?: keyof typeof Color | undefined;

  @Field(() => [Color], {
    nullable: true,
    description: undefined
  })
  in?: Array<keyof typeof Color> | undefined;

  @Field(() => [Color], {
    nullable: true,
    description: undefined
  })
  notIn?: Array<keyof typeof Color> | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by fields: SampleModelWhereInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { BooleanFilter } from \\"../inputs/BooleanFilter\\";
import { DateTimeFilter } from \\"../inputs/DateTimeFilter\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { JsonFilter } from \\"../inputs/JsonFilter\\";
import { NullableStringFilter } from \\"../inputs/NullableStringFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class SampleModelWhereInput {
  @Field(() => IntFilter, {
    nullable: true,
    description: undefined
  })
  intIdField?: IntFilter | undefined;

  @Field(() => StringFilter, {
    nullable: true,
    description: undefined
  })
  stringField?: StringFilter | undefined;

  @Field(() => NullableStringFilter, {
    nullable: true,
    description: undefined
  })
  optionalStringField?: NullableStringFilter | undefined;

  @Field(() => IntFilter, {
    nullable: true,
    description: undefined
  })
  intField?: IntFilter | undefined;

  @Field(() => FloatFilter, {
    nullable: true,
    description: undefined
  })
  floatField?: FloatFilter | undefined;

  @Field(() => BooleanFilter, {
    nullable: true,
    description: undefined
  })
  booleanField?: BooleanFilter | undefined;

  @Field(() => DateTimeFilter, {
    nullable: true,
    description: undefined
  })
  dateField?: DateTimeFilter | undefined;

  @Field(() => JsonFilter, {
    nullable: true,
    description: undefined
  })
  jsonField?: JsonFilter | undefined;

  @Field(() => [SampleModelWhereInput], {
    nullable: true,
    description: undefined
  })
  AND?: SampleModelWhereInput[] | undefined;

  @Field(() => [SampleModelWhereInput], {
    nullable: true,
    description: undefined
  })
  OR?: SampleModelWhereInput[] | undefined;

  @Field(() => [SampleModelWhereInput], {
    nullable: true,
    description: undefined
  })
  NOT?: SampleModelWhereInput[] | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by fields: SampleModelWhereUniqueInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class SampleModelWhereUniqueInput {
  @Field(() => Int, {
    nullable: true,
    description: undefined
  })
  intIdField?: number | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  stringField?: string | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by relation fields: FirstModelOrderByInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { SortOrder } from \\"../../enums/SortOrder\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class FirstModelOrderByInput {
  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  idField?: keyof typeof SortOrder | undefined;

  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  uniqueStringField?: keyof typeof SortOrder | undefined;

  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  floatField?: keyof typeof SortOrder | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by relation fields: FirstModelScalarWhereInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { SecondModelFilter } from \\"../inputs/SecondModelFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class FirstModelScalarWhereInput {
  @Field(() => IntFilter, {
    nullable: true,
    description: undefined
  })
  idField?: IntFilter | undefined;

  @Field(() => StringFilter, {
    nullable: true,
    description: undefined
  })
  uniqueStringField?: StringFilter | undefined;

  @Field(() => FloatFilter, {
    nullable: true,
    description: undefined
  })
  floatField?: FloatFilter | undefined;

  @Field(() => SecondModelFilter, {
    nullable: true,
    description: undefined
  })
  secondModelsField?: SecondModelFilter | undefined;

  @Field(() => [FirstModelScalarWhereInput], {
    nullable: true,
    description: undefined
  })
  AND?: FirstModelScalarWhereInput[] | undefined;

  @Field(() => [FirstModelScalarWhereInput], {
    nullable: true,
    description: undefined
  })
  OR?: FirstModelScalarWhereInput[] | undefined;

  @Field(() => [FirstModelScalarWhereInput], {
    nullable: true,
    description: undefined
  })
  NOT?: FirstModelScalarWhereInput[] | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by relation fields: FirstModelWhereInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { SecondModelFilter } from \\"../inputs/SecondModelFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class FirstModelWhereInput {
  @Field(() => IntFilter, {
    nullable: true,
    description: undefined
  })
  idField?: IntFilter | undefined;

  @Field(() => StringFilter, {
    nullable: true,
    description: undefined
  })
  uniqueStringField?: StringFilter | undefined;

  @Field(() => FloatFilter, {
    nullable: true,
    description: undefined
  })
  floatField?: FloatFilter | undefined;

  @Field(() => SecondModelFilter, {
    nullable: true,
    description: undefined
  })
  secondModelsField?: SecondModelFilter | undefined;

  @Field(() => [FirstModelWhereInput], {
    nullable: true,
    description: undefined
  })
  AND?: FirstModelWhereInput[] | undefined;

  @Field(() => [FirstModelWhereInput], {
    nullable: true,
    description: undefined
  })
  OR?: FirstModelWhereInput[] | undefined;

  @Field(() => [FirstModelWhereInput], {
    nullable: true,
    description: undefined
  })
  NOT?: FirstModelWhereInput[] | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by relation fields: FirstModelWhereUniqueInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class FirstModelWhereUniqueInput {
  @Field(() => Int, {
    nullable: true,
    description: undefined
  })
  idField?: number | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  uniqueStringField?: string | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: BooleanFilter 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class BooleanFilter {
  @Field(() => Boolean, {
    nullable: true,
    description: undefined
  })
  equals?: boolean | undefined;

  @Field(() => Boolean, {
    nullable: true,
    description: undefined
  })
  not?: boolean | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: DateTimeFilter 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class DateTimeFilter {
  @Field(() => Date, {
    nullable: true,
    description: undefined
  })
  equals?: Date | undefined;

  @Field(() => Date, {
    nullable: true,
    description: undefined
  })
  not?: Date | undefined;

  @Field(() => [Date], {
    nullable: true,
    description: undefined
  })
  in?: Date[] | undefined;

  @Field(() => [Date], {
    nullable: true,
    description: undefined
  })
  notIn?: Date[] | undefined;

  @Field(() => Date, {
    nullable: true,
    description: undefined
  })
  lt?: Date | undefined;

  @Field(() => Date, {
    nullable: true,
    description: undefined
  })
  lte?: Date | undefined;

  @Field(() => Date, {
    nullable: true,
    description: undefined
  })
  gt?: Date | undefined;

  @Field(() => Date, {
    nullable: true,
    description: undefined
  })
  gte?: Date | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: FloatFilter 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class FloatFilter {
  @Field(() => Float, {
    nullable: true,
    description: undefined
  })
  equals?: number | undefined;

  @Field(() => Float, {
    nullable: true,
    description: undefined
  })
  not?: number | undefined;

  @Field(() => [Float], {
    nullable: true,
    description: undefined
  })
  in?: number[] | undefined;

  @Field(() => [Float], {
    nullable: true,
    description: undefined
  })
  notIn?: number[] | undefined;

  @Field(() => Float, {
    nullable: true,
    description: undefined
  })
  lt?: number | undefined;

  @Field(() => Float, {
    nullable: true,
    description: undefined
  })
  lte?: number | undefined;

  @Field(() => Float, {
    nullable: true,
    description: undefined
  })
  gt?: number | undefined;

  @Field(() => Float, {
    nullable: true,
    description: undefined
  })
  gte?: number | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: IntFilter 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class IntFilter {
  @Field(() => Int, {
    nullable: true,
    description: undefined
  })
  equals?: number | undefined;

  @Field(() => Int, {
    nullable: true,
    description: undefined
  })
  not?: number | undefined;

  @Field(() => [Int], {
    nullable: true,
    description: undefined
  })
  in?: number[] | undefined;

  @Field(() => [Int], {
    nullable: true,
    description: undefined
  })
  notIn?: number[] | undefined;

  @Field(() => Int, {
    nullable: true,
    description: undefined
  })
  lt?: number | undefined;

  @Field(() => Int, {
    nullable: true,
    description: undefined
  })
  lte?: number | undefined;

  @Field(() => Int, {
    nullable: true,
    description: undefined
  })
  gt?: number | undefined;

  @Field(() => Int, {
    nullable: true,
    description: undefined
  })
  gte?: number | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: JsonFilter 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class JsonFilter {
  @Field(() => GraphQLJSON, {
    nullable: true,
    description: undefined
  })
  equals?: InputJsonValue | undefined;

  @Field(() => GraphQLJSON, {
    nullable: true,
    description: undefined
  })
  not?: InputJsonValue | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: NullableBooleanFilter 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class NullableBooleanFilter {
  @Field(() => Boolean, {
    nullable: true,
    description: undefined
  })
  equals?: boolean | undefined;

  @Field(() => Boolean, {
    nullable: true,
    description: undefined
  })
  not?: boolean | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: NullableDateTimeFilter 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class NullableDateTimeFilter {
  @Field(() => Date, {
    nullable: true,
    description: undefined
  })
  equals?: Date | undefined;

  @Field(() => Date, {
    nullable: true,
    description: undefined
  })
  not?: Date | undefined;

  @Field(() => [Date], {
    nullable: true,
    description: undefined
  })
  in?: Date[] | undefined;

  @Field(() => [Date], {
    nullable: true,
    description: undefined
  })
  notIn?: Date[] | undefined;

  @Field(() => Date, {
    nullable: true,
    description: undefined
  })
  lt?: Date | undefined;

  @Field(() => Date, {
    nullable: true,
    description: undefined
  })
  lte?: Date | undefined;

  @Field(() => Date, {
    nullable: true,
    description: undefined
  })
  gt?: Date | undefined;

  @Field(() => Date, {
    nullable: true,
    description: undefined
  })
  gte?: Date | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: NullableFloatFilter 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class NullableFloatFilter {
  @Field(() => Float, {
    nullable: true,
    description: undefined
  })
  equals?: number | undefined;

  @Field(() => Float, {
    nullable: true,
    description: undefined
  })
  not?: number | undefined;

  @Field(() => [Float], {
    nullable: true,
    description: undefined
  })
  in?: number[] | undefined;

  @Field(() => [Float], {
    nullable: true,
    description: undefined
  })
  notIn?: number[] | undefined;

  @Field(() => Float, {
    nullable: true,
    description: undefined
  })
  lt?: number | undefined;

  @Field(() => Float, {
    nullable: true,
    description: undefined
  })
  lte?: number | undefined;

  @Field(() => Float, {
    nullable: true,
    description: undefined
  })
  gt?: number | undefined;

  @Field(() => Float, {
    nullable: true,
    description: undefined
  })
  gte?: number | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: NullableIntFilter 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class NullableIntFilter {
  @Field(() => Int, {
    nullable: true,
    description: undefined
  })
  equals?: number | undefined;

  @Field(() => Int, {
    nullable: true,
    description: undefined
  })
  not?: number | undefined;

  @Field(() => [Int], {
    nullable: true,
    description: undefined
  })
  in?: number[] | undefined;

  @Field(() => [Int], {
    nullable: true,
    description: undefined
  })
  notIn?: number[] | undefined;

  @Field(() => Int, {
    nullable: true,
    description: undefined
  })
  lt?: number | undefined;

  @Field(() => Int, {
    nullable: true,
    description: undefined
  })
  lte?: number | undefined;

  @Field(() => Int, {
    nullable: true,
    description: undefined
  })
  gt?: number | undefined;

  @Field(() => Int, {
    nullable: true,
    description: undefined
  })
  gte?: number | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: NullableJsonFilter 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class NullableJsonFilter {
  @Field(() => GraphQLJSON, {
    nullable: true,
    description: undefined
  })
  equals?: InputJsonValue | undefined;

  @Field(() => GraphQLJSON, {
    nullable: true,
    description: undefined
  })
  not?: InputJsonValue | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: NullableStringFilter 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class NullableStringFilter {
  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  equals?: string | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  not?: string | undefined;

  @Field(() => [String], {
    nullable: true,
    description: undefined
  })
  in?: string[] | undefined;

  @Field(() => [String], {
    nullable: true,
    description: undefined
  })
  notIn?: string[] | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  lt?: string | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  lte?: string | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  gt?: string | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  gte?: string | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  contains?: string | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  startsWith?: string | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  endsWith?: string | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: SortOrder 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";

export enum SortOrder {
  asc = \\"asc\\",
  desc = \\"desc\\"
}
TypeGraphQL.registerEnumType(SortOrder, {
  name: \\"SortOrder\\",
  description: undefined,
});
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: StringFilter 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class StringFilter {
  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  equals?: string | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  not?: string | undefined;

  @Field(() => [String], {
    nullable: true,
    description: undefined
  })
  in?: string[] | undefined;

  @Field(() => [String], {
    nullable: true,
    description: undefined
  })
  notIn?: string[] | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  lt?: string | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  lte?: string | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  gt?: string | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  gte?: string | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  contains?: string | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  startsWith?: string | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  endsWith?: string | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with composite unique index: DirectorOrderByInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { SortOrder } from \\"../../enums/SortOrder\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class DirectorOrderByInput {
  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  firstName?: keyof typeof SortOrder | undefined;

  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  lastName?: keyof typeof SortOrder | undefined;

  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  age?: keyof typeof SortOrder | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with composite unique index: DirectorWhereInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { MovieFilter } from \\"../inputs/MovieFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class DirectorWhereInput {
  @Field(() => StringFilter, {
    nullable: true,
    description: undefined
  })
  firstName?: StringFilter | undefined;

  @Field(() => StringFilter, {
    nullable: true,
    description: undefined
  })
  lastName?: StringFilter | undefined;

  @Field(() => IntFilter, {
    nullable: true,
    description: undefined
  })
  age?: IntFilter | undefined;

  @Field(() => MovieFilter, {
    nullable: true,
    description: undefined
  })
  movies?: MovieFilter | undefined;

  @Field(() => [DirectorWhereInput], {
    nullable: true,
    description: undefined
  })
  AND?: DirectorWhereInput[] | undefined;

  @Field(() => [DirectorWhereInput], {
    nullable: true,
    description: undefined
  })
  OR?: DirectorWhereInput[] | undefined;

  @Field(() => [DirectorWhereInput], {
    nullable: true,
    description: undefined
  })
  NOT?: DirectorWhereInput[] | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with composite unique index: DirectorWhereUniqueInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { FirstNameLastNameCompoundUniqueInput } from \\"../inputs/FirstNameLastNameCompoundUniqueInput\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class DirectorWhereUniqueInput {
  @Field(() => FirstNameLastNameCompoundUniqueInput, {
    nullable: true,
    description: undefined
  })
  firstName_lastName?: FirstNameLastNameCompoundUniqueInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with composite unique index: FirstNameLastNameCompoundUniqueInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class FirstNameLastNameCompoundUniqueInput {
  @Field(() => String, {
    nullable: false,
    description: undefined
  })
  firstName!: string;

  @Field(() => String, {
    nullable: false,
    description: undefined
  })
  lastName!: string;
}
"
`;

exports[`inputs should properly generate input type classes for model with id keys with relation: DirectorFirstNameDirectorLastNameTitleCompoundUniqueInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class DirectorFirstNameDirectorLastNameTitleCompoundUniqueInput {
  @Field(() => String, {
    nullable: false,
    description: undefined
  })
  directorFirstName!: string;

  @Field(() => String, {
    nullable: false,
    description: undefined
  })
  directorLastName!: string;

  @Field(() => String, {
    nullable: false,
    description: undefined
  })
  title!: string;
}
"
`;

exports[`inputs should properly generate input type classes for model with id keys with relation: MovieOrderByInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { SortOrder } from \\"../../enums/SortOrder\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class MovieOrderByInput {
  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  directorFirstName?: keyof typeof SortOrder | undefined;

  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  directorLastName?: keyof typeof SortOrder | undefined;

  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  title?: keyof typeof SortOrder | undefined;

  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  rating?: keyof typeof SortOrder | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with id keys with relation: MovieScalarWhereInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class MovieScalarWhereInput {
  @Field(() => StringFilter, {
    nullable: true,
    description: undefined
  })
  directorFirstName?: StringFilter | undefined;

  @Field(() => StringFilter, {
    nullable: true,
    description: undefined
  })
  directorLastName?: StringFilter | undefined;

  @Field(() => StringFilter, {
    nullable: true,
    description: undefined
  })
  title?: StringFilter | undefined;

  @Field(() => FloatFilter, {
    nullable: true,
    description: undefined
  })
  rating?: FloatFilter | undefined;

  @Field(() => [MovieScalarWhereInput], {
    nullable: true,
    description: undefined
  })
  AND?: MovieScalarWhereInput[] | undefined;

  @Field(() => [MovieScalarWhereInput], {
    nullable: true,
    description: undefined
  })
  OR?: MovieScalarWhereInput[] | undefined;

  @Field(() => [MovieScalarWhereInput], {
    nullable: true,
    description: undefined
  })
  NOT?: MovieScalarWhereInput[] | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with id keys with relation: MovieWhereInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { DirectorWhereInput } from \\"../inputs/DirectorWhereInput\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class MovieWhereInput {
  @Field(() => StringFilter, {
    nullable: true,
    description: undefined
  })
  directorFirstName?: StringFilter | undefined;

  @Field(() => StringFilter, {
    nullable: true,
    description: undefined
  })
  directorLastName?: StringFilter | undefined;

  @Field(() => StringFilter, {
    nullable: true,
    description: undefined
  })
  title?: StringFilter | undefined;

  @Field(() => FloatFilter, {
    nullable: true,
    description: undefined
  })
  rating?: FloatFilter | undefined;

  @Field(() => [MovieWhereInput], {
    nullable: true,
    description: undefined
  })
  AND?: MovieWhereInput[] | undefined;

  @Field(() => [MovieWhereInput], {
    nullable: true,
    description: undefined
  })
  OR?: MovieWhereInput[] | undefined;

  @Field(() => [MovieWhereInput], {
    nullable: true,
    description: undefined
  })
  NOT?: MovieWhereInput[] | undefined;

  @Field(() => DirectorWhereInput, {
    nullable: true,
    description: undefined
  })
  director?: DirectorWhereInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with id keys with relation: MovieWhereUniqueInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { DirectorFirstNameDirectorLastNameTitleCompoundUniqueInput } from \\"../inputs/DirectorFirstNameDirectorLastNameTitleCompoundUniqueInput\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class MovieWhereUniqueInput {
  @Field(() => DirectorFirstNameDirectorLastNameTitleCompoundUniqueInput, {
    nullable: true,
    description: undefined
  })
  directorFirstName_directorLastName_title?: DirectorFirstNameDirectorLastNameTitleCompoundUniqueInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes when model field is renamed: SampleOrderByInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { SortOrder } from \\"../../enums/SortOrder\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class SampleOrderByInput {
  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  idField?: keyof typeof SortOrder | undefined;

  modelFieldName?: keyof typeof SortOrder | undefined;

  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  get mappedFieldName() {
    return this.modelFieldName;
  }

  set mappedFieldName(modelFieldName: keyof typeof SortOrder | undefined) {
    this.modelFieldName = modelFieldName;
  }
}
"
`;

exports[`inputs should properly generate input type classes when model field is renamed: SampleWhereInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class SampleWhereInput {
  @Field(() => IntFilter, {
    nullable: true,
    description: undefined
  })
  idField?: IntFilter | undefined;

  modelFieldName?: StringFilter | undefined;

  @Field(() => [SampleWhereInput], {
    nullable: true,
    description: undefined
  })
  AND?: SampleWhereInput[] | undefined;

  @Field(() => [SampleWhereInput], {
    nullable: true,
    description: undefined
  })
  OR?: SampleWhereInput[] | undefined;

  @Field(() => [SampleWhereInput], {
    nullable: true,
    description: undefined
  })
  NOT?: SampleWhereInput[] | undefined;

  @Field(() => StringFilter, {
    nullable: true,
    description: undefined
  })
  get mappedFieldName() {
    return this.modelFieldName;
  }

  set mappedFieldName(modelFieldName: StringFilter | undefined) {
    this.modelFieldName = modelFieldName;
  }
}
"
`;

exports[`inputs should properly generate input type classes when model is renamed: ExampleOrderByInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { SortOrder } from \\"../../enums/SortOrder\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class ExampleOrderByInput {
  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  intIdField?: keyof typeof SortOrder | undefined;

  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  stringField?: keyof typeof SortOrder | undefined;

  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  floatField?: keyof typeof SortOrder | undefined;

  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  booleanField?: keyof typeof SortOrder | undefined;

  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  dateField?: keyof typeof SortOrder | undefined;

  @Field(() => SortOrder, {
    nullable: true,
    description: undefined
  })
  otherId?: keyof typeof SortOrder | undefined;
}
"
`;

exports[`inputs should properly generate input type classes when model is renamed: ExampleWhereInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";
import { BooleanFilter } from \\"../inputs/BooleanFilter\\";
import { DateTimeFilter } from \\"../inputs/DateTimeFilter\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { OtherModelWhereInput } from \\"../inputs/OtherModelWhereInput\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class ExampleWhereInput {
  @Field(() => IntFilter, {
    nullable: true,
    description: undefined
  })
  intIdField?: IntFilter | undefined;

  @Field(() => StringFilter, {
    nullable: true,
    description: undefined
  })
  stringField?: StringFilter | undefined;

  @Field(() => FloatFilter, {
    nullable: true,
    description: undefined
  })
  floatField?: FloatFilter | undefined;

  @Field(() => BooleanFilter, {
    nullable: true,
    description: undefined
  })
  booleanField?: BooleanFilter | undefined;

  @Field(() => DateTimeFilter, {
    nullable: true,
    description: undefined
  })
  dateField?: DateTimeFilter | undefined;

  @Field(() => IntFilter, {
    nullable: true,
    description: undefined
  })
  otherId?: IntFilter | undefined;

  @Field(() => [ExampleWhereInput], {
    nullable: true,
    description: undefined
  })
  AND?: ExampleWhereInput[] | undefined;

  @Field(() => [ExampleWhereInput], {
    nullable: true,
    description: undefined
  })
  OR?: ExampleWhereInput[] | undefined;

  @Field(() => [ExampleWhereInput], {
    nullable: true,
    description: undefined
  })
  NOT?: ExampleWhereInput[] | undefined;

  @Field(() => OtherModelWhereInput, {
    nullable: true,
    description: undefined
  })
  other?: OtherModelWhereInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes when model is renamed: ExampleWhereUniqueInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../../helpers/prisma-client-mock\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class ExampleWhereUniqueInput {
  @Field(() => Int, {
    nullable: true,
    description: undefined
  })
  intIdField?: number | undefined;

  @Field(() => String, {
    nullable: true,
    description: undefined
  })
  stringField?: string | undefined;
}
"
`;

exports[`inputs when prisma client is generated into node_modules should properly generate prisma client imports in input type class files: SampleWhereInput 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"@prisma/client\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@InputType({
  isAbstract: true,
  description: undefined,
})
export class SampleWhereInput {
  @Field(() => IntFilter, {
    nullable: true,
    description: undefined
  })
  idField?: IntFilter | undefined;

  @Field(() => StringFilter, {
    nullable: true,
    description: undefined
  })
  modelFieldName?: StringFilter | undefined;

  @Field(() => [SampleWhereInput], {
    nullable: true,
    description: undefined
  })
  AND?: SampleWhereInput[] | undefined;

  @Field(() => [SampleWhereInput], {
    nullable: true,
    description: undefined
  })
  OR?: SampleWhereInput[] | undefined;

  @Field(() => [SampleWhereInput], {
    nullable: true,
    description: undefined
  })
  NOT?: SampleWhereInput[] | undefined;
}
"
`;
