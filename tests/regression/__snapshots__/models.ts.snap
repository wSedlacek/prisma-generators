// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`models should properly generate object type class for prisma model with descriptions: User 1`] = `
"import { Field, Float, ID, Int, ObjectType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../helpers/prisma-client-mock\\";
import { Post } from \\"../models/Post\\";

/** User model doc */
@ObjectType({
  isAbstract: true,
  description: \\"User model doc\\",
})
export class User {
  @Field(() => Int, {
    nullable: false,
    description: undefined,
  })
  id!: number;

  /** field doc */
  @Field(() => String, {
    nullable: false,
    description: \\"field doc\\",
  })
  stringField!: string;

  @Field(() => Int, {
    nullable: false,
    description: undefined,
  })
  intField!: number;

  /** relation doc */
  posts?: Post[] | undefined;
}
"
`;

exports[`models should properly generate object type class for prisma model with different scalar fields types: User 1`] = `
"import { Field, Float, ID, Int, ObjectType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../helpers/prisma-client-mock\\";

@ObjectType({
  isAbstract: true,
  description: undefined,
})
export class User {
  @Field(() => Int, {
    nullable: false,
    description: undefined,
  })
  intIdField!: number;

  @Field(() => String, {
    nullable: false,
    description: undefined,
  })
  stringField!: string;

  @Field(() => String, {
    nullable: true,
    description: undefined,
  })
  optionalStringField?: string | undefined;

  @Field(() => Int, {
    nullable: false,
    description: undefined,
  })
  intField!: number;

  @Field(() => Float, {
    nullable: false,
    description: undefined,
  })
  floatField!: number;

  @Field(() => Boolean, {
    nullable: false,
    description: undefined,
  })
  booleanField!: boolean;

  @Field(() => Date, {
    nullable: false,
    description: undefined,
  })
  dateField!: Date;

  @Field(() => GraphQLJSON, {
    nullable: false,
    description: undefined,
  })
  jsonField!: JsonValue;
}
"
`;

exports[`models should properly generate object type class for prisma model with enum and alias fields types: User 1`] = `
"import { Field, Float, ID, Int, ObjectType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../helpers/prisma-client-mock\\";
import { Sample } from \\"../enums/Sample\\";

@ObjectType({
  isAbstract: true,
  description: undefined,
})
export class User {
  @Field(() => Int, {
    nullable: false,
    description: undefined,
  })
  intIdField!: number;

  @Field(() => Float, {
    nullable: false,
    description: undefined,
  })
  aliasField!: number;

  @Field(() => Sample, {
    nullable: false,
    description: undefined,
  })
  enumField!: keyof typeof Sample;
}
"
`;

exports[`models should properly generate object type class for prisma model with renamed fields: User 1`] = `
"import { Field, Float, ID, Int, ObjectType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../helpers/prisma-client-mock\\";
import { Post } from \\"../models/Post\\";

@ObjectType({
  isAbstract: true,
  description: undefined,
})
export class User {
  @Field(() => Int, {
    nullable: false,
    description: undefined,
  })
  id!: number;

  @Field(() => Date, {
    nullable: false,
    description: undefined,
  })
  dateOfBirth!: Date;

  /** renamed field docs */
  name!: string;

  balance?: number | undefined;

  posts?: Post[] | undefined;

  /** renamed field docs */
  @Field(() => String, {
    nullable: false,
    description: \\"renamed field docs\\",
  })
  get firstName(): string {
    return this.name;
  }

  @Field(() => Float, {
    nullable: true,
    description: undefined,
  })
  get accountBalance(): number | undefined {
    return this.balance;
  }
}
"
`;

exports[`models should properly generate object type classes for prisma models with cyclic relations when models are renamed: Article 1`] = `
"import { Field, Float, ID, Int, ObjectType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../helpers/prisma-client-mock\\";
import { Client } from \\"../models/Client\\";

@ObjectType({
  isAbstract: true,
  description: undefined,
})
export class Article {
  @Field(() => Int, {
    nullable: false,
    description: undefined,
  })
  id!: number;

  author?: Client;

  @Field(() => Int, {
    nullable: false,
    description: undefined,
  })
  authorId!: number;
}
"
`;

exports[`models should properly generate object type classes for prisma models with cyclic relations when models are renamed: Client 1`] = `
"import { Field, Float, ID, Int, ObjectType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../helpers/prisma-client-mock\\";
import { Article } from \\"../models/Article\\";

@ObjectType({
  isAbstract: true,
  description: undefined,
})
export class Client {
  @Field(() => Int, {
    nullable: false,
    description: undefined,
  })
  id!: number;

  posts?: Article[] | undefined;
}
"
`;

exports[`models should properly generate object type classes for prisma models with cyclic relations: Post 1`] = `
"import { Field, Float, ID, Int, ObjectType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../helpers/prisma-client-mock\\";
import { User } from \\"../models/User\\";

@ObjectType({
  isAbstract: true,
  description: undefined,
})
export class Post {
  @Field(() => Int, {
    nullable: false,
    description: undefined,
  })
  id!: number;

  author?: User;

  @Field(() => Int, {
    nullable: false,
    description: undefined,
  })
  authorId!: number;
}
"
`;

exports[`models should properly generate object type classes for prisma models with cyclic relations: User 1`] = `
"import { Field, Float, ID, Int, ObjectType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../helpers/prisma-client-mock\\";
import { Post } from \\"../models/Post\\";

@ObjectType({
  isAbstract: true,
  description: undefined,
})
export class User {
  @Field(() => Int, {
    nullable: false,
    description: undefined,
  })
  id!: number;

  posts?: Post[] | undefined;
}
"
`;

exports[`models should properly generate object type classes for prisma models with self relations: Service 1`] = `
"import { Field, Float, ID, Int, ObjectType } from \\"@nestjs/graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { JsonValue, InputJsonValue } from \\"../../../helpers/prisma-client-mock\\";

@ObjectType({
  isAbstract: true,
  description: undefined,
})
export class Service {
  @Field(() => Int, {
    nullable: false,
    description: undefined,
  })
  id!: number;

  @Field(() => String, {
    nullable: false,
    description: undefined,
  })
  name!: string;

  sourceService?: Service | undefined;

  @Field(() => Int, {
    nullable: true,
    description: undefined,
  })
  sourceId?: number | undefined;

  services?: Service[] | undefined;
}
"
`;
